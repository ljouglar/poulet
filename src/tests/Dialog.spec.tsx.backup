import { render, screen, fireEvent } from '@testing-library/react';
import ConfirmDialog from '../components/ConfirmDialog';
import Notification from '../components/Notification';

// Simple tests focusing on core functionality
describe('ConfirmDialog', () => {
  const mockOnConfirm = jest.fn();
  const mockOnCancel = jest.fn();

  beforeEach(() => {
    mockOnConfirm.mockClear();
    mockOnCancel.mockClear();
  });

  it('should render title and message when open', () => {
    render(
      <ConfirmDialog
        open={true}
        title="Delete Order"
        message="Are you sure you want to delete this order?"
        onConfirm={mockOnConfirm}
        onCancel={mockOnCancel}
      />
    );

    expect(screen.getByText('Delete Order')).toBeInTheDocument();
    expect(screen.getByText('Are you sure you want to delete this order?')).toBeInTheDocument();
  });

  it('should render default button texts', () => {
    render(
      <ConfirmDialog
        open={true}
        title="Test"
        message="Test message"
        onConfirm={mockOnConfirm}
        onCancel={mockOnCancel}
      />
    );

    expect(screen.getByText('Confirmer')).toBeInTheDocument();
    expect(screen.getByText('Annuler')).toBeInTheDocument();
  });

  it('should call onConfirm when confirm button is clicked', () => {
    render(
      <ConfirmDialog
        open={true}
        title="Test"
        message="Test message"
        onConfirm={mockOnConfirm}
        onCancel={mockOnCancel}
      />
    );

    fireEvent.click(screen.getByText('Confirmer'));
    expect(mockOnConfirm).toHaveBeenCalledTimes(1);
  });

  it('should call onCancel when cancel button is clicked', () => {
    render(
      <ConfirmDialog
        open={true}
        title="Test"
        message="Test message"
        onConfirm={mockOnConfirm}
        onCancel={mockOnCancel}
      />
    );

    fireEvent.click(screen.getByText('Annuler'));
    expect(mockOnCancel).toHaveBeenCalledTimes(1);
  });
});

describe('Notification', () => {
  const mockOnClose = jest.fn();

  beforeEach(() => {
    mockOnClose.mockClear();
  });

  it('should render message when open', () => {
    render(
      <Notification
        open={true}
        message="Order successfully created"
        severity="success"
        onClose={mockOnClose}
      />
    );

    expect(screen.getByText('Order successfully created')).toBeInTheDocument();
  });

  it('should render different severity messages', () => {
    const testCases = [
      { severity: 'success' as const, message: 'Success message' },
      { severity: 'error' as const, message: 'Error message' },
      { severity: 'warning' as const, message: 'Warning message' },
      { severity: 'info' as const, message: 'Info message' }
    ];

    testCases.forEach(({ severity, message }) => {
      const { unmount } = render(
        <Notification
          open={true}
          message={message}
          severity={severity}
          onClose={mockOnClose}
        />
      );

      expect(screen.getByText(message)).toBeInTheDocument();
      unmount(); // Clean up for next test
    });
  });
});